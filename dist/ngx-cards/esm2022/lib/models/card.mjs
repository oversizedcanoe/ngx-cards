import { CardValue, Suit } from "../shared/enums";
export class Card {
    suit;
    value;
    constructor(value, suit) {
        if (value in CardValue == false) {
            throw new Error(`Cannot create Card object with value: ${value}`);
        }
        if (suit in Suit == false) {
            throw new Error(`Cannot create Card object with suit: ${suit}`);
        }
        if (suit == Suit.None && value != CardValue.Joker) {
            throw new Error(`Invalid value: ${value}, only CardValue.Joker can be created with Suit.None`);
        }
        this.value = value;
        this.suit = suit;
    }
    shorthandName() {
        let name = '';
        let addFirstCharOfSuit = true;
        switch (this.value) {
            case CardValue.Joker:
                name += "W"; // wild
                addFirstCharOfSuit = false;
                break;
            case CardValue.Ace:
                name += "A";
                break;
            case CardValue.Jack:
                name += "J";
                break;
            case CardValue.Queen:
                name += "Q";
                break;
            case CardValue.King:
                name += "K";
                break;
            default:
                name += this.value.toString();
        }
        if (addFirstCharOfSuit) {
            name += Suit[this.suit][0]; // first character of suit
        }
        return name;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1jYXJkcy9zcmMvbGliL21vZGVscy9jYXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbEQsTUFBTSxPQUFPLElBQUk7SUFDYixJQUFJLENBQU87SUFDWCxLQUFLLENBQVM7SUFFZCxZQUFZLEtBQWEsRUFBRSxJQUFVO1FBQ2pDLElBQUcsS0FBSyxJQUFJLFNBQVMsSUFBSSxLQUFLLEVBQUMsQ0FBQztZQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxLQUFLLEVBQUUsQ0FBQyxDQUFBO1FBQ3JFLENBQUM7UUFFRCxJQUFHLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxFQUFDLENBQUM7WUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUNuRSxDQUFDO1FBRUQsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxLQUFLLElBQUksU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2hELE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLEtBQUssc0RBQXNELENBQUMsQ0FBQTtRQUNsRyxDQUFDO1FBRUQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVELGFBQWE7UUFDVCxJQUFJLElBQUksR0FBVyxFQUFFLENBQUM7UUFDdEIsSUFBSSxrQkFBa0IsR0FBWSxJQUFJLENBQUM7UUFFdkMsUUFBUSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDakIsS0FBSyxTQUFTLENBQUMsS0FBSztnQkFDaEIsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDLE9BQU87Z0JBQ3BCLGtCQUFrQixHQUFHLEtBQUssQ0FBQztnQkFDM0IsTUFBTTtZQUNWLEtBQUssU0FBUyxDQUFDLEdBQUc7Z0JBQ2QsSUFBSSxJQUFJLEdBQUcsQ0FBQztnQkFDWixNQUFNO1lBQ1YsS0FBSyxTQUFTLENBQUMsSUFBSTtnQkFDZixJQUFJLElBQUksR0FBRyxDQUFDO2dCQUNaLE1BQU07WUFDVixLQUFLLFNBQVMsQ0FBQyxLQUFLO2dCQUNoQixJQUFJLElBQUksR0FBRyxDQUFDO2dCQUNaLE1BQU07WUFDVixLQUFLLFNBQVMsQ0FBQyxJQUFJO2dCQUNmLElBQUksSUFBSSxHQUFHLENBQUM7Z0JBQ1osTUFBTTtZQUNWO2dCQUNJLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3RDLENBQUM7UUFFRCxJQUFJLGtCQUFrQixFQUFFLENBQUM7WUFDckIsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQywwQkFBMEI7UUFDMUQsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDO0lBRWhCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhcmRWYWx1ZSwgU3VpdCB9IGZyb20gXCIuLi9zaGFyZWQvZW51bXNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBDYXJkIHtcclxuICAgIHN1aXQ6IFN1aXQ7XHJcbiAgICB2YWx1ZTogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiBudW1iZXIsIHN1aXQ6IFN1aXQpIHtcclxuICAgICAgICBpZih2YWx1ZSBpbiBDYXJkVmFsdWUgPT0gZmFsc2Upe1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjcmVhdGUgQ2FyZCBvYmplY3Qgd2l0aCB2YWx1ZTogJHt2YWx1ZX1gKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoc3VpdCBpbiBTdWl0ID09IGZhbHNlKXtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY3JlYXRlIENhcmQgb2JqZWN0IHdpdGggc3VpdDogJHtzdWl0fWApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc3VpdCA9PSBTdWl0Lk5vbmUgJiYgdmFsdWUgIT0gQ2FyZFZhbHVlLkpva2VyKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB2YWx1ZTogJHt2YWx1ZX0sIG9ubHkgQ2FyZFZhbHVlLkpva2VyIGNhbiBiZSBjcmVhdGVkIHdpdGggU3VpdC5Ob25lYClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLnN1aXQgPSBzdWl0O1xyXG4gICAgfVxyXG5cclxuICAgIHNob3J0aGFuZE5hbWUoKSB7XHJcbiAgICAgICAgbGV0IG5hbWU6IHN0cmluZyA9ICcnO1xyXG4gICAgICAgIGxldCBhZGRGaXJzdENoYXJPZlN1aXQ6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHRoaXMudmFsdWUpIHtcclxuICAgICAgICAgICAgY2FzZSBDYXJkVmFsdWUuSm9rZXI6XHJcbiAgICAgICAgICAgICAgICBuYW1lICs9IFwiV1wiOyAvLyB3aWxkXHJcbiAgICAgICAgICAgICAgICBhZGRGaXJzdENoYXJPZlN1aXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENhcmRWYWx1ZS5BY2U6XHJcbiAgICAgICAgICAgICAgICBuYW1lICs9IFwiQVwiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2FyZFZhbHVlLkphY2s6XHJcbiAgICAgICAgICAgICAgICBuYW1lICs9IFwiSlwiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2FyZFZhbHVlLlF1ZWVuOlxyXG4gICAgICAgICAgICAgICAgbmFtZSArPSBcIlFcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENhcmRWYWx1ZS5LaW5nOlxyXG4gICAgICAgICAgICAgICAgbmFtZSArPSBcIktcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgbmFtZSArPSB0aGlzLnZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYWRkRmlyc3RDaGFyT2ZTdWl0KSB7XHJcbiAgICAgICAgICAgIG5hbWUgKz0gU3VpdFt0aGlzLnN1aXRdWzBdOyAvLyBmaXJzdCBjaGFyYWN0ZXIgb2Ygc3VpdFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5hbWU7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG4iXX0=