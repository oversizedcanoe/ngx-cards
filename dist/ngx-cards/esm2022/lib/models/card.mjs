import { CardValue, Suit } from "../shared/enums";
import { Joker } from "./joker";
export class Card {
    suit;
    value;
    constructor(value, suit) {
        if (value in CardValue == false) {
            throw new Error(`Cannot create Card object with value: ${value}`);
        }
        if (suit in Suit == false) {
            throw new Error(`Cannot create Card object with suit: ${suit}`);
        }
        if (suit == Suit.None && value != CardValue.Joker) {
            throw new Error(`Invalid value: ${value}, only CardValue.Joker can be created with Suit.None`);
        }
        this.value = value;
        this.suit = suit;
    }
    shorthandName() {
        let name = '';
        switch (this.value) {
            case CardValue.Joker:
                name += "W"; // wild
                break;
            case CardValue.Ace:
                name += "A";
                break;
            case CardValue.Jack:
                name += "J";
                break;
            case CardValue.Queen:
                name += "Q";
                break;
            case CardValue.King:
                name += "K";
                break;
            default:
                name += this.value.toString();
        }
        if (this instanceof Joker == false) {
            name += Suit[this.suit][0]; // first character of suit
        }
        return name;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1jYXJkcy9zcmMvbGliL21vZGVscy9jYXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVoQyxNQUFNLE9BQU8sSUFBSTtJQUNiLElBQUksQ0FBTztJQUNYLEtBQUssQ0FBUztJQUVkLFlBQVksS0FBYSxFQUFFLElBQVU7UUFDakMsSUFBRyxLQUFLLElBQUksU0FBUyxJQUFJLEtBQUssRUFBQyxDQUFDO1lBQzVCLE1BQU0sSUFBSSxLQUFLLENBQUMseUNBQXlDLEtBQUssRUFBRSxDQUFDLENBQUE7UUFDckUsQ0FBQztRQUVELElBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLEVBQUMsQ0FBQztZQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxJQUFJLEVBQUUsQ0FBQyxDQUFBO1FBQ25FLENBQUM7UUFFRCxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLEtBQUssSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDaEQsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsS0FBSyxzREFBc0QsQ0FBQyxDQUFBO1FBQ2xHLENBQUM7UUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsYUFBYTtRQUNULElBQUksSUFBSSxHQUFXLEVBQUUsQ0FBQztRQUV0QixRQUFRLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNqQixLQUFLLFNBQVMsQ0FBQyxLQUFLO2dCQUNoQixJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsT0FBTztnQkFDcEIsTUFBTTtZQUNWLEtBQUssU0FBUyxDQUFDLEdBQUc7Z0JBQ2QsSUFBSSxJQUFJLEdBQUcsQ0FBQztnQkFDWixNQUFNO1lBQ1YsS0FBSyxTQUFTLENBQUMsSUFBSTtnQkFDZixJQUFJLElBQUksR0FBRyxDQUFDO2dCQUNaLE1BQU07WUFDVixLQUFLLFNBQVMsQ0FBQyxLQUFLO2dCQUNoQixJQUFJLElBQUksR0FBRyxDQUFDO2dCQUNaLE1BQU07WUFDVixLQUFLLFNBQVMsQ0FBQyxJQUFJO2dCQUNmLElBQUksSUFBSSxHQUFHLENBQUM7Z0JBQ1osTUFBTTtZQUNWO2dCQUNJLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3RDLENBQUM7UUFFRCxJQUFJLElBQUksWUFBWSxLQUFLLElBQUksS0FBSyxFQUFFLENBQUM7WUFDakMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQywwQkFBMEI7UUFDMUQsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDO0lBRWhCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhcmRWYWx1ZSwgU3VpdCB9IGZyb20gXCIuLi9zaGFyZWQvZW51bXNcIjtcclxuaW1wb3J0IHsgSm9rZXIgfSBmcm9tIFwiLi9qb2tlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENhcmQge1xyXG4gICAgc3VpdDogU3VpdDtcclxuICAgIHZhbHVlOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IodmFsdWU6IG51bWJlciwgc3VpdDogU3VpdCkge1xyXG4gICAgICAgIGlmKHZhbHVlIGluIENhcmRWYWx1ZSA9PSBmYWxzZSl7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGNyZWF0ZSBDYXJkIG9iamVjdCB3aXRoIHZhbHVlOiAke3ZhbHVlfWApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihzdWl0IGluIFN1aXQgPT0gZmFsc2Upe1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjcmVhdGUgQ2FyZCBvYmplY3Qgd2l0aCBzdWl0OiAke3N1aXR9YClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzdWl0ID09IFN1aXQuTm9uZSAmJiB2YWx1ZSAhPSBDYXJkVmFsdWUuSm9rZXIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHZhbHVlOiAke3ZhbHVlfSwgb25seSBDYXJkVmFsdWUuSm9rZXIgY2FuIGJlIGNyZWF0ZWQgd2l0aCBTdWl0Lk5vbmVgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuc3VpdCA9IHN1aXQ7XHJcbiAgICB9XHJcblxyXG4gICAgc2hvcnRoYW5kTmFtZSgpIHtcclxuICAgICAgICBsZXQgbmFtZTogc3RyaW5nID0gJyc7XHJcblxyXG4gICAgICAgIHN3aXRjaCAodGhpcy52YWx1ZSkge1xyXG4gICAgICAgICAgICBjYXNlIENhcmRWYWx1ZS5Kb2tlcjpcclxuICAgICAgICAgICAgICAgIG5hbWUgKz0gXCJXXCI7IC8vIHdpbGRcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENhcmRWYWx1ZS5BY2U6XHJcbiAgICAgICAgICAgICAgICBuYW1lICs9IFwiQVwiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2FyZFZhbHVlLkphY2s6XHJcbiAgICAgICAgICAgICAgICBuYW1lICs9IFwiSlwiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2FyZFZhbHVlLlF1ZWVuOlxyXG4gICAgICAgICAgICAgICAgbmFtZSArPSBcIlFcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENhcmRWYWx1ZS5LaW5nOlxyXG4gICAgICAgICAgICAgICAgbmFtZSArPSBcIktcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgbmFtZSArPSB0aGlzLnZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIEpva2VyID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIG5hbWUgKz0gU3VpdFt0aGlzLnN1aXRdWzBdOyAvLyBmaXJzdCBjaGFyYWN0ZXIgb2Ygc3VpdFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5hbWU7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG4iXX0=