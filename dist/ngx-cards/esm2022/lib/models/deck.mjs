import { Card } from "./card";
import { Joker } from "./joker";
export class Deck {
    cards = [];
    cardCount = this.cards.length;
    constructor(jokersIncluded = false, shuffled = true) {
        for (let suitIndex = 1; suitIndex < 5; suitIndex++) {
            for (let cardIndex = 1; cardIndex < 14; cardIndex++) {
                this.cards.push(new Card(cardIndex, suitIndex));
            }
        }
        this.cards.reverse();
        if (jokersIncluded) {
            this.cards.push(new Joker());
            this.cards.push(new Joker());
        }
        if (shuffled) {
            this.shuffle();
        }
    }
    printDeck() {
        this.cards.forEach(element => {
            console.log(element.shorthandName());
        });
    }
    shuffle() {
        let currentIndex = this.cards.length;
        let randomIndex;
        while (currentIndex > 0) {
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex--;
            // Swap current index with random index
            [this.cards[currentIndex], this.cards[randomIndex]] = [this.cards[randomIndex], this.cards[currentIndex]];
        }
    }
    drawCardFromTop() {
        return this.cards.pop();
    }
    drawCardFromBottom() {
        return this.cards.shift();
    }
    addCardToTop(card) {
        this.cards.push(card);
    }
    addCardToMiddle(card) {
        let randomIndex = Math.floor(Math.random() * this.cards.length);
        this.cards.splice(randomIndex, 0, card);
    }
    addCardToBottom(card) {
        this.cards.unshift(card);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1jYXJkcy9zcmMvbGliL21vZGVscy9kZWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDOUIsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVoQyxNQUFNLE9BQU8sSUFBSTtJQUNMLEtBQUssR0FBVyxFQUFFLENBQUM7SUFDM0IsU0FBUyxHQUFXLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBRXRDLFlBQVksY0FBYyxHQUFHLEtBQUssRUFBRSxRQUFRLEdBQUcsSUFBSTtRQUMvQyxLQUFLLElBQUksU0FBUyxHQUFHLENBQUMsRUFBRSxTQUFTLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUM7WUFDakQsS0FBSyxJQUFJLFNBQVMsR0FBRyxDQUFDLEVBQUUsU0FBUyxHQUFHLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDO2dCQUNsRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUNwRCxDQUFDO1FBQ0wsQ0FBQztRQUVELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFckIsSUFBSSxjQUFjLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ2pDLENBQUM7UUFFRCxJQUFJLFFBQVEsRUFBRSxDQUFDO1lBQ1gsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ25CLENBQUM7SUFDTCxDQUFDO0lBRUQsU0FBUztRQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsT0FBTztRQUNILElBQUksWUFBWSxHQUFXLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQzdDLElBQUksV0FBbUIsQ0FBQztRQUV4QixPQUFPLFlBQVksR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUN0QixXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsWUFBWSxDQUFDLENBQUM7WUFDdkQsWUFBWSxFQUFFLENBQUM7WUFDZix1Q0FBdUM7WUFDdkMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQzlHLENBQUM7SUFDTCxDQUFDO0lBRUQsZUFBZTtRQUNYLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsa0JBQWtCO1FBQ2QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRCxZQUFZLENBQUMsSUFBVTtRQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsZUFBZSxDQUFDLElBQVU7UUFDdEIsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxlQUFlLENBQUMsSUFBVTtRQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYXJkIH0gZnJvbSBcIi4vY2FyZFwiO1xyXG5pbXBvcnQgeyBKb2tlciB9IGZyb20gXCIuL2pva2VyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRGVjayB7XHJcbiAgICBwcml2YXRlIGNhcmRzOiBDYXJkW10gPSBbXTtcclxuICAgIGNhcmRDb3VudDogbnVtYmVyID0gdGhpcy5jYXJkcy5sZW5ndGg7XHJcblxyXG4gICAgY29uc3RydWN0b3Ioam9rZXJzSW5jbHVkZWQgPSBmYWxzZSwgc2h1ZmZsZWQgPSB0cnVlKSB7XHJcbiAgICAgICAgZm9yIChsZXQgc3VpdEluZGV4ID0gMTsgc3VpdEluZGV4IDwgNTsgc3VpdEluZGV4KyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgY2FyZEluZGV4ID0gMTsgY2FyZEluZGV4IDwgMTQ7IGNhcmRJbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmRzLnB1c2gobmV3IENhcmQoY2FyZEluZGV4LCBzdWl0SW5kZXgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jYXJkcy5yZXZlcnNlKCk7XHJcblxyXG4gICAgICAgIGlmIChqb2tlcnNJbmNsdWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNhcmRzLnB1c2gobmV3IEpva2VyKCkpO1xyXG4gICAgICAgICAgICB0aGlzLmNhcmRzLnB1c2gobmV3IEpva2VyKCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNodWZmbGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2h1ZmZsZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcmludERlY2soKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jYXJkcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlbGVtZW50LnNob3J0aGFuZE5hbWUoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2h1ZmZsZSgpOiB2b2lkIHtcclxuICAgICAgICBsZXQgY3VycmVudEluZGV4OiBudW1iZXIgPSB0aGlzLmNhcmRzLmxlbmd0aDtcclxuICAgICAgICBsZXQgcmFuZG9tSW5kZXg6IG51bWJlcjtcclxuXHJcbiAgICAgICAgd2hpbGUgKGN1cnJlbnRJbmRleCA+IDApIHtcclxuICAgICAgICAgICAgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjdXJyZW50SW5kZXgpO1xyXG4gICAgICAgICAgICBjdXJyZW50SW5kZXgtLTtcclxuICAgICAgICAgICAgLy8gU3dhcCBjdXJyZW50IGluZGV4IHdpdGggcmFuZG9tIGluZGV4XHJcbiAgICAgICAgICAgIFt0aGlzLmNhcmRzW2N1cnJlbnRJbmRleF0sIHRoaXMuY2FyZHNbcmFuZG9tSW5kZXhdXSA9IFt0aGlzLmNhcmRzW3JhbmRvbUluZGV4XSwgdGhpcy5jYXJkc1tjdXJyZW50SW5kZXhdXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZHJhd0NhcmRGcm9tVG9wKCk6IENhcmQgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhcmRzLnBvcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXdDYXJkRnJvbUJvdHRvbSgpOiBDYXJkIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYXJkcy5zaGlmdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZENhcmRUb1RvcChjYXJkOiBDYXJkKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jYXJkcy5wdXNoKGNhcmQpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZENhcmRUb01pZGRsZShjYXJkOiBDYXJkKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5jYXJkcy5sZW5ndGgpO1xyXG4gICAgICAgIHRoaXMuY2FyZHMuc3BsaWNlKHJhbmRvbUluZGV4LCAwLCBjYXJkKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRDYXJkVG9Cb3R0b20oY2FyZDogQ2FyZCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY2FyZHMudW5zaGlmdChjYXJkKTtcclxuICAgIH1cclxufVxyXG4iXX0=